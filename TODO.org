* TODO
  
  - 동적메모리 할당에 성공하면, queue.h를 메모리 제한 없는 동적메모리를
  할당받는 알고리즘으로 업그레이드 하기. 현재로써는 큐가 꽉차고 
  인터럽트가 발생했을 시 키보드큐에서 에러가 발생할 소지가 있다.
  + itoa(), Console::printf(), Shell::prompt_, Shell::커맨드추가해주는함수
    + vector만들고 shell의 커맨드 저장기능 만들기

- Shell::input을 적당한 자료구조를 만든 후에 변경하기. previousInput, nextInput

- 32main.cc의 함수들 범용성 고려하여 개선하기
- 확인용 메세지 출력 스택, 함수 나중에 정리하기

- usb 메모리가 분리될때의 인터럽트 처리를 하여 usb가 분리되어도 os가 작동하도록 힉

- bss가 메모리상에 로드될때 그 영역이 확보된다면, 부트로더가 메모리로 그대로
  복사해서 로드할 때에도 bss영역이 그 제서야 확보될까? 그런데, 로드 되기전에
  그 이미지 파일을 hex모드로 보았을 때, 문자열이 위치한 주소는 검사결과 
  그대로였다. 그래서 부트로더는 말그래도 이미지파일(bin)을 그대로 복사하는 
  것이 아닌가? 그렇다면 복사되기전 미리 bss영역은 확보되어 있어야 하지 않나.
  물론, 어떤 os위에서 돌아가는 elf과 같은 형식의 프로그램이라면 프로그램이 
  실행될때 bss영역이 확보된다고 이해하면 되겠다만, 컴파일 후에 text, data, bss영역의
  크기는 변하지 않는다고도 들었는데, 그렇다면 컴파일 후에 이미 그 영역이 확보되어있다는 소리아닌가?
- 왜 64MB가 OS구동 하는데 필요한 최소메모리임을 검사하는가(main.cpp[8line])
  
- 지금처럼 page table들을 만들면서 초기설정값을 그대로 쓴다면 문제없지만
   나중에 page속성을 빈번히 바꾸거나 관리를 해야한다면,
   지금처럼 함수가 아닌 class화 시킬 필요가 있을 듯 하다.
- g++ option중에 -ffreestanding과 std=c++11은 대립하지 않는가?
- Paging에 대해 PAT와 TLB는 무엇인가.

* PROBLEM
** task가 255개까지 밖에 화면에 나타나지 않는다.
** shell의 커맨드리스트에 커맨드를 추가하면 알 수 없는 인터럽트가 발생하다.
   도대체가 어디가 원인이고 문제인지를 모르겠다.
   가상머신에선 invalid option (6번 interrupt)이
   실제 머신에선 device not available (7번 interrupt)이 발생한다.

   - invalid opcode와 device not available이 발생하는 것으로 보아 실수 연산과 관계가 있지 않을까 싶다.
     커맨드리스트에 멤버함수포인터에 값을 3개이상 대입하면 바로 에러발생.

** shutdownCmd로 reboot되지 않는다.
** updateKeyboardLED함수에서 인터럽트가 멈춰버리는 버그 발생
   에뮬레이터에서 위의 함수를 call하는 toggle key를 눌렀을 때 맨 처음 인터럽트가 3번 발생한다.
   분명 위 함수 내에선 인터럽트가 발생하지 않도록 해놓았는데, 혹시 인터럽트가 축적되었다가 나중에
   한 번에 발생할 수도 있나

** keyboard객체를 전역으로 instance화할시에 constructor가 call되지 않는다.
   main함수 전에 불러져야 되는데, entry point가 main이라 그러지 싶다.
   http://wiki.osdev.org/Calling_Global_Constructors
   -> 성공하면 하나밖에 없는 객체들은 전역으로 설정하는 설계 고려

* SOLVED
** ts로 확인했는데 새로운 태스크 우선순위가 0으로 되어 있었다. testTask랑 어떤 차이?
   해결 -> 태스크간의 동기화를 해야겠다.
** 이미지 총 용량이 32256bytes을 초과하면  인터럽트가 발생하거나 에러가 발생
   디스크에 쓰는 툴과 테스트 머신을 변경해 보니 내 컴퓨터에서만
   로드되지 않는 것으로 판명, 지금 까지 이미지를 씌우고
   파티션을 만들어야 로드가 되었으나 가상머신이 그대로 읽는 것을 보고
   혹시나 다른 pc에서 테스트를 해보니 그대로 읽었다.
   내 pc에서는 파티션을 만들지 않으면 부팅조차 되지 않는 것으로 보아
   파티션을 만들때 MBR에 어떤 문제 signature flag가 생성되는 것이
   아닐까 생각된다.

   -> 알아보니 MBR에도 종류가 많았다. 그 중 gnome-disk-utility는
   Structure of a modern standard MBR를 사용하는 듯 하다.
   디스크 이미지를 usb에 쓴 다음에 파일시스템은 만들 필요가 없었다.
   윈도우나 다른 os에 인식되기 위해서는 usb에 총 섹터수, 처음 chs,
   마지막 chs, 처음 lba등등 빠짐없이 파티션을 설정해야하나
   내 BIOS에서는 파티션 타입만 보고 부팅 실행을 결정하는 것 같다.
   
** mtest의 i값이 증가하지 않는다.
   - 바로 q를 계속해서 누르면 종료되지 않고, i값이 증가한다.

     어셈블리를 확인 후 register값을 확인. rbp값은 함수 호출 전과 후가
     같은 값임이 확이 되었으나 차후에 값이 변동됨.
     원인은 loadContext()에서 rbp값을 복원하지 않았기 때문.
     또한, rax는 inline assembly작성시에 메모리를 참조할때 base addresss로
     이용되었다. 때문에 rbx를 대용할 필요가 있었다.
     -> inline assembly를 작성할시엔 작성되는 assembly도 고려해서 작성
** 이미지 전체 크기가 1.7KB가까이 되면 에뮬레이터에선 이상없으나 실제 내 컴퓨터에서 알 수 없는 에러가 발생
   include하는 것도, 사용하는 것도 아닌 코드를 덧붙였을 때 단순히 용량이 늘어난 것으로 에러가 발생.

   - 단순히 USB교체하니 문제 해결
** 정확히 키보드 인터럽트는 언제 발생하는가?
   키보드 드라이버를 작성하는데 있어서, 컨트롤러의 버퍼를 읽을 시에 Extended key와 같은 것은
   나머지 code 값도 불러 들어야 하나, 하는 단계에서 정확히 할필요성을 느꼈으나(readOutBuf함수)
   책에선 언급하지 않고 있고, 구글링을 해보아 겨우 찾은 사이트(http://www.delorie.com/djgpp/doc/ug/interrupts/inthandlers1.html)에선
   키가 pressed일 때 make-code interrupt가, released일 때 break-code interrupt가 발생한다고,
   나와 있음.

   - 직접 interrupt가 발생하는 횟수를 출력하고 scan code를 출력하는 간단한 코드를 작성결과
     키보드에서 컨트롤러의 버퍼에 어떤 값을 저장하는 횟수 만큼 interrupt가 발생했다.
     즉, Extended key들은 down과 up일 때 각각 두번씩(excluding pause key) 발생했다. 총 4번 발생.
     일반적인 key 들이 pressed될때 한번, released될때 한번으로 총 2번 발생하는 것과 대조된다.
     
     그리고 참고로, 컨트롤러의 버퍼의 값이 pop되지 않는 이상, 더 이상 interrupt는 발생하지 않았다.
      
** division by zero ISR수행 후에 복귀가 되지 않는다.
   - printMessage함수가 iretq전에 호출되면 키보드 입력을 계속해서 받음
     -> printMessage함수대신 인수가 3개 이상인 함수를 넣어도 가능
     -> 인수가 2개인 함수와 3개인 함수의 차이는 edx register를 쓰느냐 마느냐에 있었다.
        함수 없이 edx값에 0이 아닌 값을 넣어도 가능
     -> 어셈블리 분석결과 0으로 나눌 때에 dl값에 0을 대입후 eax를 dl로 나누었다.
     -> Divided Error는 예외type이 Faults로 핸들러의 실행이 완료되면 interrupt가 발생한
        코드부터 다시 실행을 하기 때문에 Divided Error를 다시 발생시켜, 다시 ISR이 호출되는
	무한루프에 빠지게 된다. 따라서, 복귀되지 않는 것이 아니라 무한루프에 빠졌던 것.
** ISR내의 context를 저장하는 어셈블리코드를 함수화 하여 calling할 시에 에러가 된다.
   혹시, c언어 자체가 함수를 calling할 때 따로 context들을 저장하는가?
   예를 들면, parameters, return address, old rbp, local variables를 순서대로 push 후에
   context들을 전부 push하지는 않는가, 이 때문에 에러가 발생하는가?
   함수를 calling 할 때, 원래의 context값으로 어떻게 복원하는가?

*** 따로 context를 저장하지 않았다. C에선 함수를 부르기 전에 다루던 register들은 메모리에 store된 상태.
    기본적으로 메모리위에 놓인 데이터들을 다루고, register는 연산이나 기타 작업시에 임시적인 장소로 쓰인다.
    따라서, 함수를 call할 때도 따로 context를 저장할 필요는 없어보이나, 앞서 작성한 boot_loader와 같이
    어셈블리어 코드는 주로 register의 값을 직접 다루기 때문에, 함수 calling 전후에 사용하던 register의
    데이터 보존이 중요한 것으로 보인다.
    interrupt의 경우엔 어떤 코드를 수행하다가 발생할지 모르기 때문에, 전의 context들을 전부 push해놓을 필요가 있다.
    ! 결론, 위의 문제는 함수종료시 popq rbp를 수행하게 되는데, 위의 어셈블리 함수는 context를 push하는 함수이기에
    stack이 정리되지 않고, 그대로 남아있게 되는 문제가 있다. 아마, 에러는 마지막에 push된 register가 R15인데,
    popq rbp를 수행하니 에러가 발생하듯 싶다.

** Divide Error가 작동하지 않는다.
   모든 데이터 재확인(2번), 그리고 GDT와 TSS에는 문제가 없어보인다.
   GDTR을 store한 데이터를 점검해 보아도, loadGDTR()없이는 loadTR()이
   오작동 하는 것으로 보아, 새로운 segment descriptor도 잘 인식 하는 것으로
   보인다. IDT부분 재검토.
   가능성은 낮지만 혹시 base_addr가 포인터형이라 문제가 되는가?
     
*** Interrupt Gate의 Type설정 오류
     - 그냥 허무하다. 이것 땜에 몇일을 고생했는데
** 작업환경 구축
   binary file로 부터 직접, gcc, gdb, emacs최신버전 인스톨하기
   ./configuration --prefix=(여기에 설정된 경로는 최후에 make install시에 설치될 경로)
   -> 이 명령을 실행한 곳에서 make가능한 파일들이 생성된다.
   make후에 make install을 해야 위에 설정해 놓았던 경로에 설치됨.
   # gcc는 특별히 전에 의존파일을 설치해줘야 함(자세한건 구글링)
** USB에 직접 쓰기!!! 

   - 파티션이 지정되어 있든 않든, 마운트 상태이든, 언마운트 상태이든, 아래의 명령어로 OS이미지를 USB에 쓰는 것이 가능하다.
     $ sudo dd if=(쓸 이미지 파일 : Sinos.ios) of=(파일을 쓸 곳 : /dev/sdb)
     여기서 주의할 점은 usb가 sdb1에 마운트 되어 있어도 of=/dev/sdb1으로 써서는 안된다는 점.
     그리고, 위와 같이 이미지를 쓴 다음에, 파티션을 생성해줘야 비로소 부트USB로 사용 가능했다.
     (주의 할 점은, 위의 명령어로 이미지를 쓸 땐 USB안에 있던 파일은 모두 삭제된다. 단, 이미지를 쓰고 파티션 지정 후 파일 보관은 가능)

** 부트로더에서 알 수 없는 버그 발생. 부트로더의 함수를 조금만 수정해도 에러.
   원인을 도저히 모르겠다. 어디서 에러가 발생했는지 갈피를 잡을 수 조차 없다. 

*** 작은 오류들을 제거하고, 어느 정도 버그가 어디서 발생했는지 감은 잡았다. 허나 정확한 원인은 아직.
    전의 백업파일의 메인 함수와 지금의 메인 함수 비교결과, copy64kernelArea함수를 자체를 제거하면
    재부팅에러가 발생하지 않아, copy64kernelArea함수를 분석, 그 후 64kernel을 복사하지 않은
    주소로 jmp시엔 성공했다, 그리고 copy64kernelArea함수를 포함 후 64kernel기준주소를 0x80000로
    설정하자 성공했다.(0x90000도 성공)
    A20게이트가 문제인가 싶어 활성화 해봤으나 실패.
    나중에서야 init64bitPageTables함수의 첫 어드레스가 0x100000로 설정되어 있는 것을 확인.
    하지만 이 어드레스를 바꾸어도 에러, 64kernel기준주소를 바꾸어도 에러.

    - switch64kernel의 PML4 base address설정값 문제.
      전체적으로 값설정이 통일되지 않았던 점이라는 기본적인 문제
      ld의 기준주소 = 64kernel복사 기준주소 = ISP설정 주소
      CR3의 기준주소 = page tables의 기준주소
      유의 하자.
** Assembly function이 c++ code에서 calling되지 않음. (undefined reference)
   아직 원인을 모르겠다. 대안으로썬 c++ code안에 inline으로 asm()을 삽입해보는 정도...

   - 작은 코드로 실험 -> 성공. gcc은 되는데 g++로는 되지 않았다.
     이유를 알아보니 C++은 멤버함수나 오버로드를 지원하기 때문에 실제 컴파일시 함수이름을
     mangling해서 식별한다. 그래서 어셈블러 함수를 식별하지 못한점. extern "C"를 이용해 해결.

** Memory map에 어떤 값을 대입할 때 기준주소란 (ex. table entry, register... etc) 명확히 하기.
   - 기준주소(base address)란 그 memory전체가 기준주소이고 그 하위 비트가 flags로 쓰인다고 추정된다.
     GDTR처럼 명확하게 '32bit의 기준주소'라고 명시되어 있지 않은 이상.
     기준주소가 반영 될땐 나머지 flag들은 0으로 되어 무시되는 것 같다.

** sinos_iso_maker로 이미지 파일을 섹션 단위(512)에 맞추기 위해서 커널의 소스의 남는 부분을 0으로 채워야 하는데 이상한 값들이 대신 채워진다. 이유는?
   fwrite로 2개씩 이상으로 채우면 이상한 값이 채워짐.

   - fwrite함수의 MAN PAGE를 다시 확인, 그리고 fwrite가 쓰여진 다른 예들을 확인 후 문제 발견
     fwrite의 첫번째 인수는 데이터를 얻어오는 위치이나 갯수를 입력할 경우 그 범위를 넘어서는 데이터를 읽어옴.
     즉, 읽어 오는 주소가 배열의 첫번째 주소이고 그 배열의 요소 몇 개를 지정하여 읽어오는 것은 가능하나
     하나의 변수 값을 읽어 올때 갯수란 똑같은 그 변수를 몇개 읽어 오는 것이 아니라 그 주소를 시작으로 몇 개를 읽어 오는 것.
    
** boot_loader/boot_loader.s의 33번째 라인에서 es에 값을 대입했을 뿐인데 프로그램이 멈추었다.
  원인이 무엇인가? HDD는 CHA지원 하지 않기 때문에?
  LBA로 시도를 해보자. 우선 간단히 Read시도 후 성공하면 다시 Parameters읽기에 시도

*** LBA는 Read시도에도 실패했다. 성공 코드를 갖다 붙여도 실패 
    DAP가 잘못 설정되어있나? 분명 테스트시에는 LBA지원하는것 같은데 QEMU의 버전을 업그레이드 시켜봐야겠다.

    - LBA리드에 성공!!
      다른 사람의 성공한 코드를 붙여 본 후에, 나의 32커널의 ds설정 주소를 맞춰야겠다 싶은 생각과 함께
      전에 ds의 설정이 맞지 않아 성공 코드를 갖다 붙여도 실패했다는 것을 알아차림.
      그리고 그 사람의 코드와 내 코드를 비교 분석. 
      의외로 제일 의심스러웠던  Little Edian에 의한 메모리 할당과 segment:offset설정은 맞았으나,
      예상외로 처음 섹터번호 설정에서 메모리 할당되는 방식을 잘못 이해한 점.
      pcasm에선 dq를 무슨 定数부동소수점에 쓸 수 있다고 나와있던데 그냥 쓸 수 있잖아!!!뭐야ㅋ
 
*** parameters 읽기에 성공!! 정말 기쁨!!ㅋㅋㅋㅋㅋ (5/21)
    - LBA Read에 성공하니 자연히 성공
* NOTE
  ## boot_loader수정 후엔 반드시 copy64kernelArea함수와 imageMaker.c수정!!!
  ## 수정 후 에러 발생시, 우선 image maker에서 DAP의 섹터 수 입력 부분을 체크
  ## 혹시 64커널이 로드되는 부분을 초기화 할때(main.cpp의 bzero64KernelArea함수) 실패 하는 PC가 있다면 A20 Gate를 활성화 해보기.
  ## 혹시나 중간에 문제가 생긴다면 page.h의 make64bitPageTables함수의 default인수를 제거하고 makefile에서 std=c++1을 제거
  
  ## os자체에 대한 것 보다는 생각보다 OOP로 설계를 할 때 어디까지를 추상화해야 할지
  등등 언어 자체에 대한 연구의 부실함과 설계경험의 미숙으로 인한 어려움이 많다.
